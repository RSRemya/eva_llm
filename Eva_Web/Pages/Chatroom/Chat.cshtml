@page
@model Eva_Web.Pages.Chat
@{
    ViewData["Title"] = "Chatroom";
}   

<div class="chatroom_main_div">
    @await Html.PartialAsync("_TopNavBar", @Model)
    <div class="chat_window">
    
    <center><div class="chat_header">
        <img class='img-fluid' src='~/image/eva3.jpg' loading="lazy"></img>
    </div></center>

    <br>

    <div id="chat_body" class="chat_body">
           
            @foreach (var history in @Model.Messages)
            {
                <div class="message @history.Sender">@history.Text</div>
            } 
            
    </div>

    <div id="typing-indicator" class="typing-indicator">
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <span>Eva is typing...</span>
    </div>

    <center><div class="chat_footer">
        <textarea id="message-input" name="UserMessage" asp-for="UserMessage" placeholder="Message Eva"></textarea>
        <button id="send-button" type="button" class="send-icon">
            <i id="send-icon" class="fas fa-paper-plane"></i>
        </button>
    </div></center>
</div>                     
</div>
@section Scripts{
<script>
//This checks the prompt textfield and sets the send-btn status to active (which in-turn changes the button color)
document.addEventListener("DOMContentLoaded", () => {
    var chatBody = document.querySelector('.chat_body');
    chatBody.scrollTop = chatBody?.scrollHeight;
    const messageInput = document.getElementById("message-input");
    const sendIcon = document.getElementById("send-icon");

    // Add an input event listener to the text field
    messageInput.addEventListener("input", () => {
        if (messageInput.value.trim().length > 0) {
            sendIcon.classList.add("active"); // Add active class to the button
        } else {
            sendIcon.classList.remove("active"); // Remove active class
        }
    });

    // Add an Enter key event listener to the text field
    messageInput.addEventListener("keydown", function(event) {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault(); // Prevent adding a new line in the textarea
                if (messageInput.value.trim().length > 0) {
                    verifyAndSendMessage(messageInput); // Call the send message function
                }
            }
    });

});



document.getElementById('send-button').addEventListener('click', function () {
    let messageInput = document.getElementById('message-input');
    verifyAndSendMessage(messageInput);
});

//Checks and add the prompt for chat
async function verifyAndSendMessage(input){
    let messageText = input.value.trim();
    const sendIcon = document.getElementById("send-icon");
    const typingIndicator = document.getElementById("typing-indicator");

    if (messageText.length > 0) {
        sendIcon.classList.remove("active");
        typingIndicator.classList.add("active");
        addMessage(messageText, 'user');
        input.value = ''; 
            const formData = new FormData();
           
            formData.append('sessionId', "@Model.UserId");
            formData.append('userInput', messageText);
           
            fetch('/api/talk', {
                method: 'POST',
                body: formData
                  })
                .then(response => {
                  return response.text(); 
                })
                .then(data => { addMessage(data,"bot"); })
                .catch(error => console.error('Error:', error))
                    .finally(() => { typingIndicator.classList.remove("active") });
 
    }
}

// Function to add a message to the chat box
 function addMessage(text, sender) {
        const chatContainer = document.getElementById("chat_body");

        // Create a new message element
        const messageElement = document.createElement("div");
        messageElement.className = `message ${sender}`;
        messageElement.innerText = text;

        // Append the message to the chat container
        chatContainer.appendChild(messageElement);

        // Scroll to the bottom of the chat container
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

//sample object for chat response
 function getBotResponse(userMessage) {
        const responses = {
            "hi": "Hello! How can I assist you today?",
            "hello": "Hi there! What can I do for you?",
            "how are you": "I'm just a bot, but I'm here to help!",
            "bye": "Goodbye! Have a great day!",
        };

        // Default response if no match
        return responses[userMessage.toLowerCase()] || "I'm not sure how to respond to that.";
    }
</script>
}